[
  {
    "objectID": "labs/lab-2.html",
    "href": "labs/lab-2.html",
    "title": "Laboratorio 2",
    "section": "",
    "text": "Conceptos claves\n\n\n\n\n\n\nEn este taller nos enfocaremos en explorar tablas de datos en R.\nRecuerda que puedes descargar y reproducir este proyecto directo en RStudio dando Click aquí ⏎"
  },
  {
    "objectID": "labs/lab-1.html",
    "href": "labs/lab-1.html",
    "title": "Laboratorio 1",
    "section": "",
    "text": "Conceptos claves\n\n\n\nObjeto: contenedores de información que permiten al usuario realizar procedimientos numéricos, estadísticos, tabulaciones, entre otros.\nEstructuras de datos: son formatos de almacenamiento de información.\nFunciones: acciones que se realizan sobre los objetos y que producen un output. Por ejemplo, calcular la media sobre un vector sería: mean(objeto)\nCoerción implícita: proceso en el cual el lenguaje de programación define un ajuste por defecto.\nEn este taller nos enfocaremos en una introducción a R para el procesamiento datos. Para instala R y RStudio en tu computador puedes recurrir a los siguientes enlaces:\nTambién puedes ver el siguiente video tutorial: https://jd-conejeros.com/blog/2023/2023-03-15-r-rstudio/\nRecuerda que puedes descargar y reproducir este proyecto directo en RStudio dando Click aquí ⏎"
  },
  {
    "objectID": "labs/lab-1.html#interactuando-con-r-y-rstudio",
    "href": "labs/lab-1.html#interactuando-con-r-y-rstudio",
    "title": "Laboratorio 1",
    "section": "Interactuando con R y RStudio",
    "text": "Interactuando con R y RStudio\nLos comentarios que no se ejecutan como comandos, en otras palabras, es código no ejecutable:\n\n# : Comentarios que no se ejecutan como comandos\n# + : Sigue el comando en la próxima linea\n# ; : Para escribir más de una función en la misma línea\n\nRecomendación general: todo lo que tenga que ver con procesamiento, análisis de bases de datos, entre otros, debe ser en un lenguaje estandarizado: sin tilde, ñ, caracteres especiales ni mayúsculas. Con esto se evitan bastantes problemas en un inicio.\nLos directorios son relevantes, pues nos entregan una ruta relativa a la cual acceder en nuestro computador. Para esto podemos usar las siguientes funciones en R:\n\n# Consultar directorio de trabajo propio\ngetwd() \n\n# Fijar un directorio de trabajo\nsetwd(\"/Users/josedanielconejeros/Dropbox\") \n\nAl inicio es complejo trabajar con rutas relativas, ya que implica a) uno debe investigar la ruta a la cual acceder en su computador y b) es fácil cometer errores de tipeo al escribir. Esto puede volver tortuoso el proceso al inicio, además fijar rutas relativas puede variar según el sistema operativo:\n\n#Windows (\\)\nsetwd(\"\\Users\\josedanielconejeros\\Dropbox\")\n\n#Mac (/)\nsetwd(\"/Users/josedanielconejeros/Dropbox\")\n\nLa mejor opción, será trabajar proyectos en R. Puedes crear proyectos de la siguiente manera: &lt;video https://www.youtube.com/watch?v=FnkdlMIHYqQ&gt;"
  },
  {
    "objectID": "labs/lab-1.html#objetos-en-r",
    "href": "labs/lab-1.html#objetos-en-r",
    "title": "Laboratorio 1",
    "section": "Objetos en R",
    "text": "Objetos en R\nEn términos generales, todos los elementos que maneja R son objetos: un valor numérico es un objeto, un vector es un objeto, una función es un objeto, una base de datos es un objeto, un gráfico es un objeto, etc. Los objetos son entes con datos almacenados, en palabras más sencillas, contenedores de información que permiten al usuario realizar procedimientos numéricos, estadísticos, tabulaciones, entre otros.\nQue R sea un lenguaje de programación orientado a objetos (Object-Oriented Programming) significa que una misma función hace cosas distintas según la clase del objeto que recibe como argumento, pudiendo incluso no hacer nada (o producir un error) si se le pasan argumentos de una clase inadecuada.\nA continuación veremos algunos objetos de ejemplo:\nVectores numéricos\nPodemos considerar vectores de uno o varios elementos\n\na1 &lt;- c(1) #Vector de un elemento\na2 = c(1)\na3 &lt;- c(1, \"hola\" , \"chao\" , 4) #Crear un vector números y carácteres\n\nSi quisiera imprimir estos vectores puede escribir el nombre del objeto\n\na1\n\n[1] 1\n\na2\n\n[1] 1\n\na3\n\n[1] \"1\"    \"hola\" \"chao\" \"4\"   \n\n\nPodemos construir secuencias de valores\n\n#Secuencia de valores\n1:4\n\n[1] 1 2 3 4\n\n4:1\n\n[1] 4 3 2 1\n\n?seq\nseq(1, 4) \n\n[1] 1 2 3 4\n\nseq(4, 1)\n\n[1] 4 3 2 1\n\n-1:2\n\n[1] -1  0  1  2\n\nseq(-1, 2)\n\n[1] -1  0  1  2\n\nseq(from=2, to=8, by=2)\n\n[1] 2 4 6 8\n\nseq(0, 1, by=0.1)\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nseq(0, 1, length=10)\n\n [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667\n [8] 0.7777778 0.8888889 1.0000000\n\nrep(0:1, 10)\n\n [1] 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n\n?length # Para consultar argumentos de la función\n\nLa importancia de los elementos que componen el objeto:\n\nnumeros_palabras &lt;- c(1, \"hola\" , \"chao\" , 4)\nnumeros_palabras\n\n[1] \"1\"    \"hola\" \"chao\" \"4\"   \n\nsecuencia &lt;- seq(0, 1, length=11)\nsecuencia\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\n\n\nsecuencia*numeros_palabras\n\nError in secuencia * numeros_palabras: non-numeric argument to binary operator\n\n\nEn este caso se produce porque está intentando multiplicar un vector de texto por uno numérico.\n\n\n\n\n\n\nConceptos claves\n\n\n\nCoerción implícita: proceso en el cual el lenguaje de programación define un ajuste por defecto. En este caso c(1, \"hola\" , \"chao\" , 4) asume por defecto que el vector será de caracteres.\n\n\nTambién podemos realizar operaciones aritméticas con vectores:\n\nc(1, 2, 3, 4)/2\n\n[1] 0.5 1.0 1.5 2.0\n\n(1:4)/2\n\n[1] 0.5 1.0 1.5 2.0\n\n(1:4)*(4:1)\n\n[1] 4 6 6 4\n\nc(1,2,3,4)*c(4,3,2,1)\n\n[1] 4 6 6 4\n\nc(1, 2 , 3 , 4) + c(4, 3)\n\n[1] 5 5 7 7\n\nc(1, 2 , 3 , 4) + c(4, 3, 2) #Produce warning cuando no son múltiplos\n\nWarning in c(1, 2, 3, 4) + c(4, 3, 2): longer object length is not a multiple\nof shorter object length\n\n\n[1] 5 5 5 8\n\n\nPodemos realizar operaciones aritméticas con los objetos que componen esos vectores\n\nsecuencia &lt;- seq(0, 1, length=11)\nsecuencia\n\n [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\nsecuencia &lt;- secuencia*secuencia\nsecuencia\n\n [1] 0.00 0.01 0.04 0.09 0.16 0.25 0.36 0.49 0.64 0.81 1.00\n\nsecuencia^2\n\n [1] 0.0000 0.0001 0.0016 0.0081 0.0256 0.0625 0.1296 0.2401 0.4096 0.6561\n[11] 1.0000\n\npromedio &lt;- sum(secuencia)/11\npromedio\n\n[1] 0.35\n\n\nString y factores\nTendremos instancias para profundizar en este tipo de objetos. Lo importante es recordar la coerción implíca subyacente a la hora de trabajar con textos.\n\n#Dummy\nsexo &lt;- c(\"Femenino\", \"Masculino\", \"Masculino\", \"Femenino\")\nsexo[1:2] \n\n[1] \"Femenino\"  \"Masculino\"\n\nsexo &lt;- c(1,0,0,1)\nsexo[1:2] \n\n[1] 1 0\n\n#Nominales\nanimales &lt;- c(\"Elefante\", \"Jirafa\", \"Mono\", \"Caballo\")\nanimales[1]\n\n[1] \"Elefante\"\n\n#Ordinal \nacuerdo &lt;- c(\"Muy en Desacuerdo\", \"Desacuerdo\", \"Ni en desacuerdo\", \"Ni en desacuerdo\" , \n             \"Deacuerdo\", \"Muy deacuerdo\")\nacuerdo[5]\n\n[1] \"Deacuerdo\"\n\n\n¿Cuál es el problema con estas variables?\n\nclass(sexo)\n\n[1] \"numeric\"\n\n\nEn ciertas operaciones, como la visualización de datos, contar con un formato más ordenado a la hora de construir una variable cualitativa es clave. Para esto utilizamos los factores.\nLos factores son variables que cuenta con etiquetas que permiten representar sus valores numéricos. A continuación un ejemplo:\n\n#Debemos crear factores numéricos con etiquetas\nsexo &lt;- factor(c(0,1,1,0))\nsexo\n\n[1] 0 1 1 0\nLevels: 0 1\n\n#Generamos etiquetas\nsexo &lt;- factor(sexo, labels = c(\"Mujer\", \"Hombre\"))\nsexo\n\n[1] Mujer  Hombre Hombre Mujer \nLevels: Mujer Hombre\n\n\n\nclass(sexo)\n\n[1] \"factor\""
  },
  {
    "objectID": "labs/lab-1.html#matrices-dataframes-y-listas",
    "href": "labs/lab-1.html#matrices-dataframes-y-listas",
    "title": "Laboratorio 1",
    "section": "Matrices, dataframes y listas",
    "text": "Matrices, dataframes y listas\nMatrices\nLas matrices son arreglos bidimensionales (filas, columnas) y solo cuentan con elementos de la misma naturaleza. Por ejemplo, la siguiente matriz cuenta con solo elementos de tipo numérico:\n\n#Ejemplo de matriz\nmatrix(1:9,3,3) #Matriz de 3filasx3columnas con valores del 1 al 9\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nTambién podemos considerar las matrices sobre objetos y realizar acciones sobre ellas:\n\nx &lt;- matrix(1:9,3,3)\nx\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n# Podemos ver las dimensiones de la matriz (fila, columna)\ndim(x)\n\n[1] 3 3\n\n\nConstruyamos las siguientes matrices:\n\n# Podemos definir objetos como matrices\ny &lt;- matrix(1:8,2,4,byrow = FALSE) #Genera una matriz con 2 filas y 4 columnas\ny\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\ndim(y)\n\n[1] 2 4\n\nz &lt;- matrix(1:8,2,4,byrow = TRUE) #Genera la matriz completándola por filas\nz\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n\ndim(z)\n\n[1] 2 4\n\n\nA continuación aplicaremos operaciones matemáticas con dichas matrices:\n\n# Suma\nsum &lt;- y + z\nsum\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    5    8   11\n[2,]    7   10   13   16\n\n# Resta\ndiff &lt;- y - z\ndiff\n\n     [,1] [,2] [,3] [,4]\n[1,]    0    1    2    3\n[2,]   -3   -2   -1    0\n\n# Transponer\nt(y)\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n[4,]    7    8\n\n# Multiplicar/dividir por un escalar\ny*2\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    6   10   14\n[2,]    4    8   12   16\n\n2*y\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    6   10   14\n[2,]    4    8   12   16\n\ny/2\n\n     [,1] [,2] [,3] [,4]\n[1,]  0.5  1.5  2.5  3.5\n[2,]  1.0  2.0  3.0  4.0\n\n# Multiplicación elemento a elemento\ny*z\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    6   15   28\n[2,]   10   24   42   64\n\n\nLa multiplicación de matrices no es elemento a elemento. En este caso R tiene operadores especiales para la matemática matricial:\n\ny %*% z\n\nError in y %*% z: non-conformable arguments\n\n\n¿Cuál es el error? El número de columnas de la primera matriz debe ser igual al número de filas de la segunda. Construímos nuestra matriz cuadrada:\n\ny # Matriz original\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\ny_cuadrada &lt;- y[1:2,1:2] # Matriz cuadrada\n# Multiplicación de matrices\ny_cuadrada %*% z\n\n     [,1] [,2] [,3] [,4]\n[1,]   16   20   24   28\n[2,]   22   28   34   40\n\n\nEl determinante de una matriz es se obtiene al restar la multiplicación de los elementos de la diagonal principal de la matriz y la multiplicación de los elementos de la diagonal secundaria de la misma matriz. Esto nos será útil pues permite saber si estamos frente a una matriz singular (\\(det=0\\)) o no singular (\\(det\\neq0\\)).\n\n# Determinante\ndet(y_cuadrada)\n\n[1] -2\n\n\nLos determinantes son esenciales cuando queremos encontrar la matriz inversa y con esto aplicar técnicas de modelamiento estadístico como la regresión lineal (\\(\\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{Y}\\)).\n\ny_invertida &lt;- solve(y_cuadrada)\ny_invertida\n\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n\n\nSi multiplicamos la matriz original por la inversa obtenemos la identidad:\n\n# Comprobamos\ny_cuadrada %*% y_invertida\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n\n\nOtras operaciones útiles con matrices:\n\n# Rango de una matriz\nqr(y_cuadrada)\n\n$qr\n           [,1]       [,2]\n[1,] -2.2360680 -4.9193496\n[2,]  0.8944272 -0.8944272\n\n$rank\n[1] 2\n\n$qraux\n[1] 1.4472136 0.8944272\n\n$pivot\n[1] 1 2\n\nattr(,\"class\")\n[1] \"qr\"\n\nqr(y_cuadrada)$rank\n\n[1] 2\n\n# Diagonal de una matriz\ny_cuadrada\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\ndiag(y_cuadrada)\n\n[1] 1 4\n\n# Construímos la matriz identidad\ndiag(5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n\nPodemos construir una matriz de datos:\n\n# Generamos vectores de información\nedad &lt;- c(23, 45, 67, 89)\nsexo &lt;- c(1, 0, 1, 0)\npeso &lt;- c(80, 60, 70, 50)\naltura &lt;- c(180, 160, 200, 140)\npromedio &lt;- mean(altura) # Vamos a guardarlo para después\n\nConstruímos las matrices:\n\n# Unimos las matrices por separado\nmatriz_a &lt;- cbind(edad, sexo) # Columnas\nmatriz_a\n\n     edad sexo\n[1,]   23    1\n[2,]   45    0\n[3,]   67    1\n[4,]   89    0\n\nmatriz_b &lt;- cbind(peso, altura)\nmatriz_b\n\n     peso altura\n[1,]   80    180\n[2,]   60    160\n[3,]   70    200\n[4,]   50    140\n\n# Combinar matrices\nmatriz &lt;- cbind(matriz_a, matriz_b)\nmatriz\n\n     edad sexo peso altura\n[1,]   23    1   80    180\n[2,]   45    0   60    160\n[3,]   67    1   70    200\n[4,]   89    0   50    140\n\nmatriz[1,2] #Podemos ver el elemento 1 de la columna 2\n\nsexo \n   1 \n\n\nMás detalles sobre matrices:\nBates, Douglas, Martin Maechler, and Mikael Jagan. 2022. Matrix: Sparse and Dense Matrix Classes and Methods. https://cran.r-project.org/web/packages/Matrix/Matrix.pdf ⏎\nMarcos de datos\nUn marco de datos (O dataframe) es un objeto bidimensional, pero a diferencia de las matrices (numéricas), pueden almacenar objetos de distinta naturaleza (alfanuméricos). En términos más precisos es un arreglo de vectores ordenados por columnas. Podemos transformar facilmente nuestra matriz en un marco de datos.\n\nclass(matriz)\n\n[1] \"matrix\" \"array\" \n\n# Transformamos a un marco de datos\ndata &lt;- as.data.frame(matriz)\nclass(data)\n\n[1] \"data.frame\"\n\n\nDada su estructura bidimensional, podemos extraer información desde los marcos de datos aplicando la lógica [fila, columna]. Veamos un ejemplo:\n\ndata[1] # Columna\n\n  edad\n1   23\n2   45\n3   67\n4   89\n\ndata[\"edad\"] # Columna\n\n  edad\n1   23\n2   45\n3   67\n4   89\n\ndata[1,1] # Fila, columna\n\n[1] 23\n\ndata[,1] # Fila\n\n[1] 23 45 67 89\n\n\nUna forma de acceder a las variables de una marco de datos es aplicar un indexador $, por ejemplo:\n\ndata$edad\n\n[1] 23 45 67 89\n\n\nEsto es factible ya que el marco de datos no es más que un arreglo de vectores.\nListas\nLa lista representa el siguiente nivel de complejidad en las estructuras de datos que R es capaz de manejar. Podemos entender una lista como un contenedor de objetos que pueden ser de cualquier clase: números, vectores, matrices, funciones, data.frames, incluso otras listas. Una lista puede contener a la vez varios de estos objetos, que pueden ser además de distintas dimensiones.\nVeamos un ejemplo:\n\n#Creamos una lista\n#matriz, valor, vector numérico, vetor de caracteres\nobjeto &lt;- list(matriz, promedio, sexo, animales) \nobjeto\n\n[[1]]\n     edad sexo peso altura\n[1,]   23    1   80    180\n[2,]   45    0   60    160\n[3,]   67    1   70    200\n[4,]   89    0   50    140\n\n[[2]]\n[1] 170\n\n[[3]]\n[1] 1 0 1 0\n\n[[4]]\n[1] \"Elefante\" \"Jirafa\"   \"Mono\"     \"Caballo\" \n\n\nPodemos acceder a la información de las listas de variables maneras:\n\nobjeto[[1]]\n\n     edad sexo peso altura\n[1,]   23    1   80    180\n[2,]   45    0   60    160\n[3,]   67    1   70    200\n[4,]   89    0   50    140\n\n\nTambién es posible realizar operaciones con las listas:\n\nobjeto[[1]]*2\n\n     edad sexo peso altura\n[1,]   46    2  160    360\n[2,]   90    0  120    320\n[3,]  134    2  140    400\n[4,]  178    0  100    280\n\n\nEstas estructuras de datos serán bastante útiles a la hora de extraer información de funciones, realizar procesos iterativos y la extracción de datos desde la web."
  },
  {
    "objectID": "labs/lab-1.html#operadores-en-r",
    "href": "labs/lab-1.html#operadores-en-r",
    "title": "Laboratorio 1",
    "section": "Operadores en R",
    "text": "Operadores en R\nLos operadores en R nos permiten complementar las acciones que estamos realizando sobre los objetos. Los más utilizados son:\n\n\nOperadores lógicos\n\n\n& = Y\n\n| = O\n\n! = Negación\n\n~ = Negación\n\n\nOperadores aritméticos\n\n\n+ = Suma\n\n- = Resta\n\n* = Multiplicación\n\n/ = División\n\n^ = Potencia\n\n\nOperadores relacionales\n\n\n&gt; = Mayor que\n\n&lt; = Menor que\n\n&gt;= = Mayor o igual que\n\n&lt;= = Menor o igual que\n\n== = Igual\n\n!= = No igual\n\n~= = No igual\n\n\nOtros\n\n\nNA = Valor perdido\n\n\n\nVeamos algunos ejemplos:\n\n# Definamos valores\na &lt;- 3\nb &lt;- 2.999\nc &lt;- 1\n\n# Apliquemos las condiciones\nc != a\n\n[1] TRUE\n\na == b  # ¿Qué pasa si solo uso =?\n\n[1] FALSE\n\na &gt; b \n\n[1] TRUE\n\nb &lt; c\n\n[1] FALSE\n\n\nTrate de identificar los valores resultantes que obtuvo:\n\na &gt; b & b &lt; c\n\n[1] FALSE\n\na &gt; b | b &lt; c\n\n[1] TRUE"
  },
  {
    "objectID": "labs/lab-1.html#funciones-y-argumentos",
    "href": "labs/lab-1.html#funciones-y-argumentos",
    "title": "Laboratorio 1",
    "section": "Funciones y argumentos",
    "text": "Funciones y argumentos\nFunciones\nLas funciones son acciones que se realizan sobre los objetos en R, operan bajo la siguiente lógica:\n\n\nLógica de funciones en R\n\n\nVeamos algunos ejemplos:\n\n# Definamos objetos\na &lt;- seq(1:100)\nb &lt;- c(\"uno\", \"dos\", \"tres\")\n\n# Apliquemos las funciones \nlog(\"a\")\n\nError in log(\"a\"): non-numeric argument to mathematical function\n\nlog(b)\n\nError in log(b): non-numeric argument to mathematical function\n\n\n\n# Apliquemos sobre los objetos\nlog(a) # Por DEFAULT es logaritmo natural, en base a euler 2,718.\n\n  [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n  [8] 2.0794415 2.1972246 2.3025851 2.3978953 2.4849066 2.5649494 2.6390573\n [15] 2.7080502 2.7725887 2.8332133 2.8903718 2.9444390 2.9957323 3.0445224\n [22] 3.0910425 3.1354942 3.1780538 3.2188758 3.2580965 3.2958369 3.3322045\n [29] 3.3672958 3.4011974 3.4339872 3.4657359 3.4965076 3.5263605 3.5553481\n [36] 3.5835189 3.6109179 3.6375862 3.6635616 3.6888795 3.7135721 3.7376696\n [43] 3.7612001 3.7841896 3.8066625 3.8286414 3.8501476 3.8712010 3.8918203\n [50] 3.9120230 3.9318256 3.9512437 3.9702919 3.9889840 4.0073332 4.0253517\n [57] 4.0430513 4.0604430 4.0775374 4.0943446 4.1108739 4.1271344 4.1431347\n [64] 4.1588831 4.1743873 4.1896547 4.2046926 4.2195077 4.2341065 4.2484952\n [71] 4.2626799 4.2766661 4.2904594 4.3040651 4.3174881 4.3307333 4.3438054\n [78] 4.3567088 4.3694479 4.3820266 4.3944492 4.4067192 4.4188406 4.4308168\n [85] 4.4426513 4.4543473 4.4659081 4.4773368 4.4886364 4.4998097 4.5108595\n [92] 4.5217886 4.5325995 4.5432948 4.5538769 4.5643482 4.5747110 4.5849675\n [99] 4.5951199 4.6051702\n\nlog(a, base=10)\n\n  [1] 0.0000000 0.3010300 0.4771213 0.6020600 0.6989700 0.7781513 0.8450980\n  [8] 0.9030900 0.9542425 1.0000000 1.0413927 1.0791812 1.1139434 1.1461280\n [15] 1.1760913 1.2041200 1.2304489 1.2552725 1.2787536 1.3010300 1.3222193\n [22] 1.3424227 1.3617278 1.3802112 1.3979400 1.4149733 1.4313638 1.4471580\n [29] 1.4623980 1.4771213 1.4913617 1.5051500 1.5185139 1.5314789 1.5440680\n [36] 1.5563025 1.5682017 1.5797836 1.5910646 1.6020600 1.6127839 1.6232493\n [43] 1.6334685 1.6434527 1.6532125 1.6627578 1.6720979 1.6812412 1.6901961\n [50] 1.6989700 1.7075702 1.7160033 1.7242759 1.7323938 1.7403627 1.7481880\n [57] 1.7558749 1.7634280 1.7708520 1.7781513 1.7853298 1.7923917 1.7993405\n [64] 1.8061800 1.8129134 1.8195439 1.8260748 1.8325089 1.8388491 1.8450980\n [71] 1.8512583 1.8573325 1.8633229 1.8692317 1.8750613 1.8808136 1.8864907\n [78] 1.8920946 1.8976271 1.9030900 1.9084850 1.9138139 1.9190781 1.9242793\n [85] 1.9294189 1.9344985 1.9395193 1.9444827 1.9493900 1.9542425 1.9590414\n [92] 1.9637878 1.9684829 1.9731279 1.9777236 1.9822712 1.9867717 1.9912261\n [99] 1.9956352 2.0000000\n\nlog(2.718) # Cercano a 1 porque euler elevado a 1 = euler\n\n[1] 0.9998963\n\nlog(100, base=10)\n\n[1] 2\n\nlog10(100) # Forma equivalente de lo anterior\n\n[1] 2\n\nlog10(a)\n\n  [1] 0.0000000 0.3010300 0.4771213 0.6020600 0.6989700 0.7781513 0.8450980\n  [8] 0.9030900 0.9542425 1.0000000 1.0413927 1.0791812 1.1139434 1.1461280\n [15] 1.1760913 1.2041200 1.2304489 1.2552725 1.2787536 1.3010300 1.3222193\n [22] 1.3424227 1.3617278 1.3802112 1.3979400 1.4149733 1.4313638 1.4471580\n [29] 1.4623980 1.4771213 1.4913617 1.5051500 1.5185139 1.5314789 1.5440680\n [36] 1.5563025 1.5682017 1.5797836 1.5910646 1.6020600 1.6127839 1.6232493\n [43] 1.6334685 1.6434527 1.6532125 1.6627578 1.6720979 1.6812412 1.6901961\n [50] 1.6989700 1.7075702 1.7160033 1.7242759 1.7323938 1.7403627 1.7481880\n [57] 1.7558749 1.7634280 1.7708520 1.7781513 1.7853298 1.7923917 1.7993405\n [64] 1.8061800 1.8129134 1.8195439 1.8260748 1.8325089 1.8388491 1.8450980\n [71] 1.8512583 1.8573325 1.8633229 1.8692317 1.8750613 1.8808136 1.8864907\n [78] 1.8920946 1.8976271 1.9030900 1.9084850 1.9138139 1.9190781 1.9242793\n [85] 1.9294189 1.9344985 1.9395193 1.9444827 1.9493900 1.9542425 1.9590414\n [92] 1.9637878 1.9684829 1.9731279 1.9777236 1.9822712 1.9867717 1.9912261\n [99] 1.9956352 2.0000000\n\n\nArgumentos\nLos argumentos de una función no son más que configuraciones particulares de la función para que realice la acción que deseamos, podemos consultarlas de la siguiente manera:\n\nhelp(\"log\") #Para saber argumentos (elementos de la función)\n?log\nargs(\"log\")\n\nfunction (x, base = exp(1)) \nNULL\n\n?sum\nargs(\"sum\")\n\nfunction (..., na.rm = FALSE) \nNULL\n\n\nVeamos un ejemplo práctico en donde sea útil especificar un argumento:\n\n# Definimos un objeto con un elemento missing \na &lt;- c(1, 2, NA, 4)\n# Aplicamos un objeto \nsum(a)\n\n[1] NA\n\n\nEn este caso retorna un NA ya que nuestro vector tiene un elemento que es missing value, por lo que ante ese contexto la programación tiene definido por defecto retornar un NA. Podemos cambiar esto especificando el argumento na.rm=TRUE de la siguiente manera:\n\nsum(a, na.rm=TRUE)\n\n[1] 7\n\n\nAhora obtuvimos el resultado, pues le dijimos al R que sume los valores asumiendo como verdadera la orden: remover los valores NA"
  },
  {
    "objectID": "labs/lab-1.html#ejercicio-propuesto",
    "href": "labs/lab-1.html#ejercicio-propuesto",
    "title": "Laboratorio 1",
    "section": "Ejercicio propuesto",
    "text": "Ejercicio propuesto\nRevise la siguiente función y responda las preguntas.\n\nfun3 &lt;- function(x){ifelse(-10 &lt;= x  & x &lt; -5, x*2-1,\n                           ifelse(-5&lt;=x & x &lt; 0, (3*x-2)/(x+1), \n                                  ifelse(1&lt;=x & x &lt; 5, exp(x+1), \"Valor no está en el dominio\"))) \n}\n\n\nEvalue la función en los siguientes valores: -11, -7, -2, 0, 2 y 6. Interprete sus resultados.\n¿Qué pasa si aplico la función en el valor 6,5 y si ahora aplica “6,5” (incluyendo comillas). Explique la diferencia.\n¿Qué ocurre con la función en el valor 6? Solucione el problema.\nGenere un objeto con una secuencia entre 1 a 5 y evalue la función corregida en c). Muestre sus valores."
  },
  {
    "objectID": "course-bib.html",
    "href": "course-bib.html",
    "title": "Literatura del curso",
    "section": "",
    "text": "El curso tendrá lecturas obligatorias y complementarias clase a clase."
  },
  {
    "objectID": "course-bib.html#manipulación-de-tablas-en-r",
    "href": "course-bib.html#manipulación-de-tablas-en-r",
    "title": "Literatura del curso",
    "section": "Manipulación de tablas en R",
    "text": "Manipulación de tablas en R\nWickham, H., & Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. ” O’Reilly Media, Inc.”. Versión en español: https://r4ds.hadley.nz/\nUrdinez, F., & Cruz, A. (2020). R for Political Data Science: A Practical Guide. CRC Press. Recurso en línea en español: https://arcruz0.github.io/libroadp/"
  },
  {
    "objectID": "course-bib.html#visualización-de-datos",
    "href": "course-bib.html#visualización-de-datos",
    "title": "Literatura del curso",
    "section": "Visualización de datos",
    "text": "Visualización de datos\nHealy, K. (2018). Data visualization: a practical introduction. Princeton University Press. Recurso en línea: https://socviz.co/\nWhickham, H., Navarro, D., & Pedersen, T. L. ggplot2: Elegant Graphics for Data Analysis [Internet]. [cited 2021 Mar 17]. Versión en inglés: https://ggplot2-book.org/"
  },
  {
    "objectID": "course-bib.html#programación-funcional",
    "href": "course-bib.html#programación-funcional",
    "title": "Literatura del curso",
    "section": "Programación funcional",
    "text": "Programación funcional\nWickham, H. (2019). Advanced r. CRC press. Versión en inglés: https://adv-r.hadley.nz/"
  },
  {
    "objectID": "course-bib.html#reportería",
    "href": "course-bib.html#reportería",
    "title": "Literatura del curso",
    "section": "Reportería",
    "text": "Reportería\nXie, Y., Allaire, J. J., & Grolemund, G. (2018). R markdown: The definitive guide. Chapman and Hall/CRC. Versión en inglés: https://bookdown.org/yihui/rmarkdown/\nWelcome to Quarto: An open-source scientific and technical publishing system. Website: https://quarto.org/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Taller de análisis de datos I",
    "section": "",
    "text": "El procesamiento de datos se ha vuelto uno de los temas más importantes en la actualidad. Cada día hay más profesionales que están optando por especializarse en la gestión de información para generar nuevo conocimiento y/u orientar la toma decisiones. En ese sentido, los datos han pasado a ser los protagonistas de nuestra época y es imprescindible desarrollar habilidades para comprender, procesar y analizar la información que se encuentra disponible.\nUna de las herramientas más útiles para realizar estas tareas es R, un lenguaje y entorno de programación abierto para el procesamiento y análisis de datos en un sinnúmero de disciplinas. La gran ventaja de esta herramienta, además de ser gratuito, es su flexibilidad y versatilidad, ya que con 19000 librerías disponibles se puede realizar una amplia gama de tareas con datos de distinta naturaleza https://cran.r-project.org/.\nLas clases estarán programas de la siguiente manera:\n\n\n\n\nFecha\nHorario\nContenidos\nClase\nLaboratorio\n\n\n\n\nSesión 1\nViernes 13/05/2023\n09:00 - 12:15\nIntroducción a R y RStudio\n🖥️\n📚\n\n\nSesión 2\nViernes 27/05/2023\n09:00 - 12:15\nIntroducción a R y RStudio\n🖥️\n📚\n\n\nSesión 3\nViernes 01/07/2023\n09:00 - 12:15\nLectura y exploración de datos\n🖥️\n📚\n\n\nSesión 4\nSábado 15/07/2023\n09:00 - 12:15\nManipulación de tablas\n\n\n\n\nSesión 5\nViernes 02/09/2023\n09:00 - 12:15\nProgramación funcional I\n\n\n\n\nSesión 6\nViernes 23/09/2023\n09:00 - 12:15\nProgramación funcional II\n\n\n\n\nSesión 7\nViernes 04/11/2023\n09:00 - 12:15\nVisualización de datos\n\n\n\n\nSesión 8\nSábado 18/11/2023\n09:00 - 12:15\nReportería de datos"
  },
  {
    "objectID": "index.html#descripción-del-curso",
    "href": "index.html#descripción-del-curso",
    "title": "Taller de análisis de datos I",
    "section": "",
    "text": "El procesamiento de datos se ha vuelto uno de los temas más importantes en la actualidad. Cada día hay más profesionales que están optando por especializarse en la gestión de información para generar nuevo conocimiento y/u orientar la toma decisiones. En ese sentido, los datos han pasado a ser los protagonistas de nuestra época y es imprescindible desarrollar habilidades para comprender, procesar y analizar la información que se encuentra disponible.\nUna de las herramientas más útiles para realizar estas tareas es R, un lenguaje y entorno de programación abierto para el procesamiento y análisis de datos en un sinnúmero de disciplinas. La gran ventaja de esta herramienta, además de ser gratuito, es su flexibilidad y versatilidad, ya que con 19000 librerías disponibles se puede realizar una amplia gama de tareas con datos de distinta naturaleza https://cran.r-project.org/.\nLas clases estarán programas de la siguiente manera:\n\n\n\n\nFecha\nHorario\nContenidos\nClase\nLaboratorio\n\n\n\n\nSesión 1\nViernes 13/05/2023\n09:00 - 12:15\nIntroducción a R y RStudio\n🖥️\n📚\n\n\nSesión 2\nViernes 27/05/2023\n09:00 - 12:15\nIntroducción a R y RStudio\n🖥️\n📚\n\n\nSesión 3\nViernes 01/07/2023\n09:00 - 12:15\nLectura y exploración de datos\n🖥️\n📚\n\n\nSesión 4\nSábado 15/07/2023\n09:00 - 12:15\nManipulación de tablas\n\n\n\n\nSesión 5\nViernes 02/09/2023\n09:00 - 12:15\nProgramación funcional I\n\n\n\n\nSesión 6\nViernes 23/09/2023\n09:00 - 12:15\nProgramación funcional II\n\n\n\n\nSesión 7\nViernes 04/11/2023\n09:00 - 12:15\nVisualización de datos\n\n\n\n\nSesión 8\nSábado 18/11/2023\n09:00 - 12:15\nReportería de datos"
  },
  {
    "objectID": "index.html#objetivos-de-aprendizaje",
    "href": "index.html#objetivos-de-aprendizaje",
    "title": "Taller de análisis de datos I",
    "section": "Objetivos de aprendizaje",
    "text": "Objetivos de aprendizaje\nEl objetivo de este taller es aplicar de manera práctica a las principales herramientas que ofrece R para la lectura, procesamiento y visualización de datos cuantitativos. Con esto se espera tener una base troncal para la exploración e implementación de cualquier otro análisis.\nAl terminar el curso los estudiantes sabrán:\n\nRealizar análsis exploratorio de datos en R.\nGenerar visualizaciones de datos de calidad en R con ggplot2.\nProgramar a un nivel básico-intermedio con estructuras de control, funciones y procesos iterativos.\n\nLos puntos contenidos se realizarán utilizando R, por lo que los/as estudiantes profundizarán su conocimiento de este lenguaje de programación."
  },
  {
    "objectID": "index.html#metodología-del-curso",
    "href": "index.html#metodología-del-curso",
    "title": "Taller de análisis de datos I",
    "section": "Metodología del curso",
    "text": "Metodología del curso\nEl curso es práctico por lo que tiene el propósito de enseñar a programar orientado a objetivos de investigación, por lo que tendremos actividades:\n\nInteractivas: los estudiantes deberán programar análisis a partir de una pregunta/objetivo de investigación\nAplicación: los estudiantes deberán aplicar alguna de las técnicas vistas a una pregunta relevante para las políticas públicas"
  },
  {
    "objectID": "index.html#evaluaciones",
    "href": "index.html#evaluaciones",
    "title": "Taller de análisis de datos I",
    "section": "Evaluaciones",
    "text": "Evaluaciones\nEl curso tendrá 4 Tareas, ponderadas con un 25% cada una y se realizarán en parejas. Las tareas se organizaran de la siguiente manera:\n\n\n\n\nFecha Publicación\nFecha - Horario de entrega\nContenidos\nPautas\nDatos\n\n\n\n\nTarea 1\n01/07/2023\n17/07/2023 - 23:59\nVectores, matrices, listas y data frames\nClick aquí\nClick aquí\n\n\nTarea 2\n19/07/2023\n15/08/2023 - 23:59\nAnálisis descriptivo de datos\nClick aquí\nClick aquí\n\n\nTarea 3\n01/10/2023\n22/10/2023 - 23:59\nFunciones y procesos iterativos\n\n\n\n\nTarea 4\n01/11/2023\n19/11/2023 - 23:59\nVisualización de datos\n\n\n\n\n\nTodas las evaluaciones se deben enviar por correo al profesor José Daniel Conejeros jdconejeros@uc.cl con copia a la ayudante Sofía Madariaga Alvarado samadariaga@uc.cl.\nNota: Las parejas tienen que ser de áreas distintas. Pueden cambiar las parejas a lo largo de las evaluaciones. También puede ser individual."
  },
  {
    "objectID": "index.html#integridad-académica",
    "href": "index.html#integridad-académica",
    "title": "Taller de análisis de datos I",
    "section": "Integridad académica",
    "text": "Integridad académica\nComo miembro de la comunidad de la Pontificia Universidad Católica de Chile, me comprometo a respetar los principios y normativas que la rigen. Asimismo, me comprometo a actuar con rectitud y honestidad en las relaciones con los demás integrantes de la comunidad y en la realización de todo trabajo, particularmente en aquellas actividades vinculadas a la docencia, al aprendizaje y la creación, difusión y transferencia del conocimiento. Además, me comprometo a velar por la dignidad e integridad de las personas, evitando incurrir en y, rechazando, toda conducta abusiva de carácter físico, verbal, psicológico y de violencia sexual. Del mismo modo, asumo el compromiso de cuidar los bienes de la Universidad.\nMás detalles sobre la integridad académica UC aquí: https://integridadacademica.uc.cl/"
  },
  {
    "objectID": "index.html#contribuciones-y-agradecimientos",
    "href": "index.html#contribuciones-y-agradecimientos",
    "title": "Taller de análisis de datos I",
    "section": "Contribuciones y agradecimientos",
    "text": "Contribuciones y agradecimientos\nEl formato web de este curso fue desarrollado y adaptado a partir del trabajo de la Ph.D. Mine Çetinkaya-Rundel Profesora y Directora de Estudios de Grado del Departamento de Ciencias Estadísticas de la Universidad de Duke.\n\nPuedes acceder al curso de referencia aquí: STA 210"
  },
  {
    "objectID": "course-team.html#profesor",
    "href": "course-team.html#profesor",
    "title": "Equipo docente",
    "section": "Profesor",
    "text": "Profesor\nEl ayudante estará a cargo de a) entregar las clases a los estudiantes, b) realizar las correcciones de las evaluaciones c) contacto con estudiantes.\n\nJosé Daniel Conejeros\n jdconejeros@uc.cl\n JDConejeros\n jd-conejeros.com\nLicenciado en Ciencias Sociales, Magíster (c) en Sociología y Estadística PUC. Sus temas de investigación actual son salud pública, cambio climático, pobreza y metodologías cuantitativas. Ha participado en proyectos de investigación en educación, género y actualmente pertenece al Nucleo Milenio de Resistencia Bacteriana (Microb-R). En el ámbito profesional, ha sido consultor en temas cuantitativos para distintas fundaciones y organizaciones sin fines de lucro."
  },
  {
    "objectID": "course-team.html#ayudante",
    "href": "course-team.html#ayudante",
    "title": "Equipo docente",
    "section": "Ayudante",
    "text": "Ayudante\nEl ayudante estará a cargo de a) ofrecer sesiones de apoyo a los estudiantes y b) realizar las correcciones de las tareas escritas.\n\nSofía Madariaga\n samadariaga@uc.cl\n s-madariaga\n Sociología, Pontificia Universidad Católica\n Temas de interés: Educación, consumo cultural y aplicaciones computacionales a la estadística"
  },
  {
    "objectID": "class/class-1.html",
    "href": "class/class-1.html",
    "title": "Clase 1 y 2",
    "section": "",
    "text": "Ideas más importantes\n\n\n\n\nR es un lenguaje de programación de código orientado al análisis estadístico.\nRStudio es un entorno de desarrollo integrado para R que facilita el desarrollo de proyectos de ciencia de datos.\nLa programación en R se orienta a la transformación de objetos a partir de funciones."
  },
  {
    "objectID": "class/class-1.html#presentación-de-la-clase",
    "href": "class/class-1.html#presentación-de-la-clase",
    "title": "Clase 1 y 2",
    "section": "Presentación de la clase",
    "text": "Presentación de la clase\n\n\nPuedes descargar la presentación en PDF dando Click aquí ⏎"
  },
  {
    "objectID": "class/class-1.html#presentación-de-la-clase-1",
    "href": "class/class-1.html#presentación-de-la-clase-1",
    "title": "Clase 1 y 2",
    "section": "Presentación de la clase",
    "text": "Presentación de la clase\nPuedes revisar el laboratorio dando Click aquí ⏎\nTambién puedes descargar el proyecto directo para RStudio dando Click aquí ⏎"
  },
  {
    "objectID": "class/class-1.html#literatura-y-enlaces-de-referencia",
    "href": "class/class-1.html#literatura-y-enlaces-de-referencia",
    "title": "Clase 1 y 2",
    "section": "Literatura y enlaces de referencia",
    "text": "Literatura y enlaces de referencia\nWickham, H., & Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data. ” O’Reilly Media, Inc.”. Versión en español: https://r4ds.hadley.nz/\nRevisar el capítulo 1: Introducción\n\n\nVuelve a la descripción del curso ⏎"
  },
  {
    "objectID": "course-contact.html",
    "href": "course-contact.html",
    "title": "Contacto con el profesor",
    "section": "",
    "text": "Todas los pdfs de clases, los laboratorios y actualizaciones serán subidos en esta plataforma y en el moodle. Los videos de las clases no se pueden subir a esta plataforma, pero estarán disponible en moodle.\nTendremos dos vías de comunicación:\n\nSlack del curso: actuaremos en una lógica de foro para esto utilizaremos una plataforma llamada slack donde pueden preguntar y las respuestas estarán disponibles para otros. Pueden acceder al slack creandose una cuenta y buscando el canal: C057ZU1S4RJ, también pueden dar click aquí.\nContacto vía correo: pueden hacer dudas o solicitar un horario de atención a jdconejeros@uc.cl."
  }
]